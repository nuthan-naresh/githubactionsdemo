name: Dispatch Agent Build test

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'

permissions:
    contents: write
    id-token: write
jobs:

  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Install GitHub CLI
        run: sudo snap install gh

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p ~/.config/gh
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      - name: Get the latest release tag
        id: get_latest_release
        run: |
          latest_release=$(gh release view --json tagName -q .tagName)
          echo "Latest release tag: $latest_release"
          echo "::set-output name=latest_release::$latest_release"

      - name: Extract version numbers
        id: extract_version
        run: |
          version=${{ steps.get_latest_release.outputs.latest_release }}
          # Assuming the version is in the format v1.2.3
          if [[ "$version" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
          else
            echo "Version format not recognized"
            exit 1
          fi
          echo "Major: $major"
          echo "Minor: $minor"
          echo "Patch: $patch"
          echo "::set-output name=major::$major"
          echo "::set-output name=minor::$minor"
          echo "::set-output name=patch::$patch"

      - name: Use the version numbers
        run: |
          echo "Major version: ${{ steps.extract_version.outputs.major }}"
          echo "Minor version: ${{ steps.extract_version.outputs.minor }}"
          echo "Patch version: ${{ steps.extract_version.outputs.patch }}"
