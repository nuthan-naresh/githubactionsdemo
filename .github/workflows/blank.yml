name: Get Version Numbers

on:
  push:
    branches:
      - main

jobs:
  get-version:
    runs-on: arc-india-blr-development-windows

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Get the latest release tag using GitHub API
        id: get_latest_release
        run: |
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases/latest > response.json
          cat response.json
          jq -r '.tag_name' response.json > latest_release.txt
        shell: bash

      - name: Read latest release tag
        id: read_latest_release
        run: |
          latest_release=$(cat latest_release.txt)
          echo "Latest release tag: $latest_release"
          echo "::set-output name=latest_release::$latest_release"
        shell: bash

      - name: Extract version numbers
        id: extract_version
        run: |
          version=${{ steps.read_latest_release.outputs.latest_release }}
          # Assuming the version is in the format v1.2.3
          if [[ "$version" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
          else
            echo "Version format not recognized"
            exit 1
          fi
          echo "Major: $major"
          echo "Minor: $minor"
          echo "Patch: $patch"
          echo "::set-output name=major::$major"
          echo "::set-output name=minor::$minor"
          echo "::set-output name=patch::$patch"
        shell: bash

      - name: Use the version numbers
        run: |
          echo "Major version: ${{ steps.extract_version.outputs.major }}"
          echo "Minor version: ${{ steps.extract_version.outputs.minor }}"
          echo "Patch version: ${{ steps.extract_version.outputs.patch }}"
        shell: bash
